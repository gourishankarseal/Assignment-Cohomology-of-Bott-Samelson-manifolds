ring r=0,(x,y,z,u,v,w),dp;

//Create the module for the assignment basis
execute(read("SingularA"));

matrix A=m; //Set m to be the module generated by A


write("output.txt","--------------Cohomology Classes Supported in flow-up--------");



//Create two lists vertex and sing using python output file Singularlists


execute(read("Singularlists"));


//list vertex= 1, 2, 3, 4, 5, 6, 7, 8; //vertex contains the number of vertices

//list sing= "Singulartest1", "Singulartest2", "Singulartest3", "Singulartest4", "Singulartest5", "Singulartest6", "Singulartest7", "Singulartest8"; 

//sing contains the names of the Maple output text files (Coefficient matrices)


//Create the module for the Coefficient matrix for every vertex p



//Create the list of Ideal generators:


list idealgenerators=list(); //Initialize to empty list

list morse=list();//Initialize the list of morse generators

for(int j=1;j<=size(vertex);j++)
{


ideal id=0;

string q = read(sing[j]);


//The next if block generates class of identity for a vertex for which q is the empty string

if (size(q) == 0)

{

matrix identity[size(vertex)][1]; //Initialize identity = 0

for(int t=1;t <= size(vertex);t++)

{


identity[t,1]=1;

}//Create the column matrix with 1's



id = id + 1;

morse=insert(morse,identity);

write("output.txt","--------vertex--------",vertex[j],transpose(identity));


}//end if loop for generating class of identity



execute(read(sing[j]));

module n=syz(m); //Note m gets redefined automatically once you execute sing[j]

matrix B=n;

matrix D=A*B;



for(int i=1;i<=ncols(D);i++)



{



if (D[vertex[j],i]!= 0)

{

id = id + D[vertex[j],i];

matrix E[nrows(D)][1]=D[1..nrows(D),i..i];


morse=insert(morse,E);  //Insert the column E in the list of morse generators

write("output.txt","--------vertex--------",vertex[j],E);



} //end if






} //end for i


//write("output.txt","----ideal generator at this vertex--------",minbase(id));

idealgenerators = insert(idealgenerators,minbase(id),j-1);


} //end outer for j


write("output.txt","--------------Ideal generators at the vertices--------",print(idealgenerators));


//write("output.txt","--------------Morse generators--------",print(morse));

//Generate the matrix of morse generators

matrix mgenerators[size(vertex)][size(morse)];

for(int j=1;j<=size(morse);j++)
{
for(int i=1;i<=size(vertex);i++)
{

mgenerators[i,j]=morse[size(morse)+1-j][i,1];  //insert reverses the order so we had to reverse it again

}
}


write("output.txt","---------Matrix of Morse generators--------",print(mgenerators));


write("output.txt","-----Relations among Morse generators--------",syz(mgenerators));








